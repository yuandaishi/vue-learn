{
    "sourceFile": "src/mocks/is/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1650874350842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1650874363640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,39 @@\n import { rest } from \"msw\";\r\n \r\n const articles = [\r\n-    {\r\n-        id: 1,\r\n-        title: \"Node.js 日志最佳实践指南\",\r\n-        content:\r\n-            \"在开发阶段，无论是日志记录还是调试，都可以很容易地跟踪程序并检测到错误。但是在生产环境中，应该考虑更多关于日志记录的问题，因为这对于应用程序的监视和故障排除非常关键。\",\r\n-        url: \"https://juejin.cn/post/7017811851345920037\",\r\n-    },\r\n-    {\r\n-        id: 2,\r\n-        title: \"NodeJs 全栈创建多文件断点续传\",\r\n-        content:\r\n-            \"文件上传，算是项目开发中比较常见的需求，本文将展示如何构建一个多文件断点续传组件，可以同时处理多个文件，并可以在出现异常或者网络中断的情况下恢复上传，可以手动暂停和恢复文件的上传。文章内容涉及前端和后端，算是一个小型的全栈项目，项目将使用 NodeJs、Express、Busboy 和 XMLHttpRequest，并使用自己开发的脚手架 generator-norm 来构建项目。\",\r\n-        url: \"https://juejin.cn/post/7015935144007729189\",\r\n-    },\r\n-    {\r\n-        id: 3,\r\n-        title: \"Node.js 日志之winston使用指南\",\r\n-        content:\r\n-            \"Winston 是强大、灵活的 Node.js 开源日志库之一，理论上， Winston 是一个可以记录所有信息的记录器。这是一个高度直观的工具，易于定制。\",\r\n-        url: \"https://juejin.cn/post/7018169629176496158\",\r\n-    },\r\n+  {\r\n+    id: 1,\r\n+    title: \"Node.js 日志最佳实践指南\",\r\n+    content:\r\n+      \"在开发阶段，无论是日志记录还是调试，都可以很容易地跟踪程序并检测到错误。但是在生产环境中，应该考虑更多关于日志记录的问题，因为这对于应用程序的监视和故障排除非常关键。\",\r\n+    url: \"https://juejin.cn/post/7017811851345920037\",\r\n+  },\r\n+  {\r\n+    id: 2,\r\n+    title: \"NodeJs 全栈创建多文件断点续传\",\r\n+    content:\r\n+      \"文件上传，算是项目开发中比较常见的需求，本文将展示如何构建一个多文件断点续传组件，可以同时处理多个文件，并可以在出现异常或者网络中断的情况下恢复上传，可以手动暂停和恢复文件的上传。文章内容涉及前端和后端，算是一个小型的全栈项目，项目将使用 NodeJs、Express、Busboy 和 XMLHttpRequest，并使用自己开发的脚手架 generator-norm 来构建项目。\",\r\n+    url: \"https://juejin.cn/post/7015935144007729189\",\r\n+  },\r\n+  {\r\n\\ No newline at end of file\n+    id: 3,\r\n+    title: \"Node.js 日志之winston使用指南\",\r\n+    content:\r\n+      \"Winston 是强大、灵活的 Node.js 开源日志库之一，理论上， Winston 是一个可以记录所有信息的记录器。这是一个高度直观的工具，易于定制。\",\r\n+    url: \"https://juejin.cn/post/7018169629176496158\",\r\n+  },\r\n ];\r\n \r\n-export const isApi=[\r\n-    // node 服务写法\r\n-    rest.get('/api/info/:id',(req,res,ctx)=>{\r\n-        const { id } = req.params;\r\n-        console.req.params;\r\n-        const data = articles.find((item) => item.id === parseInt(id, 10));\r\n-        if (data) {\r\n-            return res(ctx.status(200), ctx.json(data));\r\n-        } else {\r\n-            return res(ctx.status(500));\r\n-        }\r\n-    })\r\n-]\n+export const isApi = [\r\n+  // node 服务写法\r\n+  rest.get(\"/api/info/:id\", (req, res, ctx) => {\r\n+    const { id } = req.params;\r\n+    console.req.params;\r\n+    const data = articles.find((item) => item.id === parseInt(id, 10));\r\n+    if (data) {\r\n+      return res(ctx.status(200), ctx.json(data));\r\n+    } else {\r\n+      return res(ctx.status(500));\r\n+    }\r\n+  }),\r\n+];\r\n"
                },
                {
                    "date": 1650875969907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n \r\n export const isApi = [\r\n   // node 服务写法\r\n   rest.get(\"/api/info/:id\", (req, res, ctx) => {\r\n+      console.log(req)\r\n     const { id } = req.params;\r\n     console.req.params;\r\n     const data = articles.find((item) => item.id === parseInt(id, 10));\r\n     if (data) {\r\n@@ -35,5 +36,5 @@\n     } else {\r\n       return res(ctx.status(500));\r\n     }\r\n   }),\r\n-];\n\\ No newline at end of file\n+];\r\n"
                },
                {
                    "date": 1650876025756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,8 @@\n   // node 服务写法\r\n   rest.get(\"/api/info/:id\", (req, res, ctx) => {\r\n       console.log(req)\r\n     const { id } = req.params;\r\n-    console.req.params;\r\n     const data = articles.find((item) => item.id === parseInt(id, 10));\r\n     if (data) {\r\n       return res(ctx.status(200), ctx.json(data));\r\n     } else {\r\n"
                },
                {
                    "date": 1650876086666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,8 @@\n     const data = articles.find((item) => item.id === parseInt(id, 10));\r\n     if (data) {\r\n       return res(ctx.status(200), ctx.json(data));\r\n     } else {\r\n-      return res(ctx.status(500));\r\n+      return res(ctx.status(500),ctx.json({msg:'找不数据'}));\r\n     }\r\n   }),\r\n ];\r\n"
                }
            ],
            "date": 1650874350842,
            "name": "Commit-0",
            "content": "import { rest } from \"msw\";\r\n\r\nconst articles = [\r\n    {\r\n        id: 1,\r\n        title: \"Node.js 日志最佳实践指南\",\r\n        content:\r\n            \"在开发阶段，无论是日志记录还是调试，都可以很容易地跟踪程序并检测到错误。但是在生产环境中，应该考虑更多关于日志记录的问题，因为这对于应用程序的监视和故障排除非常关键。\",\r\n        url: \"https://juejin.cn/post/7017811851345920037\",\r\n    },\r\n    {\r\n        id: 2,\r\n        title: \"NodeJs 全栈创建多文件断点续传\",\r\n        content:\r\n            \"文件上传，算是项目开发中比较常见的需求，本文将展示如何构建一个多文件断点续传组件，可以同时处理多个文件，并可以在出现异常或者网络中断的情况下恢复上传，可以手动暂停和恢复文件的上传。文章内容涉及前端和后端，算是一个小型的全栈项目，项目将使用 NodeJs、Express、Busboy 和 XMLHttpRequest，并使用自己开发的脚手架 generator-norm 来构建项目。\",\r\n        url: \"https://juejin.cn/post/7015935144007729189\",\r\n    },\r\n    {\r\n        id: 3,\r\n        title: \"Node.js 日志之winston使用指南\",\r\n        content:\r\n            \"Winston 是强大、灵活的 Node.js 开源日志库之一，理论上， Winston 是一个可以记录所有信息的记录器。这是一个高度直观的工具，易于定制。\",\r\n        url: \"https://juejin.cn/post/7018169629176496158\",\r\n    },\r\n];\r\n\r\nexport const isApi=[\r\n    // node 服务写法\r\n    rest.get('/api/info/:id',(req,res,ctx)=>{\r\n        const { id } = req.params;\r\n        console.req.params;\r\n        const data = articles.find((item) => item.id === parseInt(id, 10));\r\n        if (data) {\r\n            return res(ctx.status(200), ctx.json(data));\r\n        } else {\r\n            return res(ctx.status(500));\r\n        }\r\n    })\r\n]"
        }
    ]
}